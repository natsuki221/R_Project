demo()
install.packages("geojasonio")
install.packages("ggplot2")
#  注意 !  配合台北市網站開放資料的GeoJson 格式變更，請改用2_1_v01.R 或 2_1_v021.R
####### 繪製台北市界地圖解法一###################
library(geojsonio)  # 載入處理GeoJSON資料套件
####### 繪製台北市界地圖解法一###################
library(tibble)
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
print(geojson.sp@data[c('COUNTYSN','COUNTYNAME')]) # 列印縣市代碼對照
twn.map <- tidy( # 將sp物件轉換為data.frame物件
sp.taipei,  # 資料對象
region = "COUNTYSN" # 群(group)欄位的依據
)
g <- ggplot(  # 使用繪圖函式產生繪圖物件
data=twn.map,  # 符合data.frame格式的繪圖資料
mapping=aes(   # 指定data 的欄位
x = long,  # x軸為經度
y = lat    # y軸為緯度
)) +
labs(title='台北市縣界地圖(解方一)')+
geom_path(show.legend=FALSE)  # 繪出座標路徑線
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
print(geojson.sp@data[c('COUNTYSN','COUNTYNAME')]) # 列印縣市代碼對照
sp.taipei <- geojson.sp[  # 過濾geojson.sp(SpatialPolygonsDataFrame 物件) 的臺北市資料
geojson.sp@data$COUNTYNAME  %in% c('台北市'),
]
library(broom) # 載入轉換tibble(data.frame 的擴充物件)資料套件
twn.map <- tidy( # 將sp物件轉換為data.frame物件
sp.taipei,  # 資料對象
region = "COUNTYSN" # 群(group)欄位的依據
)
library(ggplot2) # 載入繪圖套件
g <- ggplot(  # 使用繪圖函式產生繪圖物件
data=twn.map,  # 符合data.frame格式的繪圖資料
mapping=aes(   # 指定data 的欄位
x = long,  # x軸為經度
y = lat    # y軸為緯度
)) +
labs(title='台北市縣界地圖(解方一)')+
geom_path(show.legend=FALSE)  # 繪出座標路徑線
print(g) # 印出台北縣市界地圖
####### 繪製台北市界地圖解法二###################
library(rgdal) # 載入rgdal套件讀取shp地圖資料
twn.shp <- rgdal::readOGR( # 回傳Spatial class 之物件
dsn='data/mapdata201911261001', # 目前工作目錄下(或路徑)圖資目錄
use_iconv = TRUE, # 依據encoding參數給予內碼轉碼
encoding='UTF-8'  # 轉為UTF-8 內碼
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
print(geojson.sp@data[c('COUNTYSN','COUNTYNAME')]) # 列印縣市代碼對照
sp.taipei <- geojson.sp[  # 過濾geojson.sp(SpatialPolygonsDataFrame 物件) 的臺北市資料
geojson.sp@data$COUNTYNAME  %in% c('台北市'),
]
library(broom) # 載入轉換tibble(data.frame 的擴充物件)資料套件
twn.map <- tidy( # 將sp物件轉換為data.frame物件
sp.taipei,  # 資料對象
region = "COUNTYSN" # 群(group)欄位的依據
)
library(ggplot2) # 載入繪圖套件
g <- ggplot(  # 使用繪圖函式產生繪圖物件
data=twn.map,  # 符合data.frame格式的繪圖資料
mapping=aes(   # 指定data 的欄位
x = long,  # x軸為經度
y = lat    # y軸為緯度
)) +
labs(title='台北市縣界地圖(解方一)')+
geom_path(show.legend=FALSE)  # 繪出座標路徑線
print(g) # 印出台北縣市界地圖
####### 繪製台北市界地圖解法二###################
library(rgdal) # 載入rgdal套件讀取shp地圖資料
twn.shp <- rgdal::readOGR( # 回傳Spatial class 之物件
dsn='data/mapdata201911261001', # 目前工作目錄下(或路徑)圖資目錄
use_iconv = TRUE, # 依據encoding參數給予內碼轉碼
encoding='UTF-8'  # 轉為UTF-8 內碼
)
source("~/Desktop/Work/R-Project/R/2_1_v01.R", echo=TRUE)
source("~/Desktop/Work/R-Project/R/2_1_v01.R", echo=TRUE)
library(tibble)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
n = 10000
sample_mean<-rep(NA,n)
t1<-rnorm(20,mean=5.3,sd=9)
plot(t1,type="l",ylim=c(-15,15))
plot(function(x)dnorm(x,mean=5.3,sd=9),-40,60)
plot(function(x)dpois(x,lambda = 1),0,10)
sampler<-function(m){rnorm(m,mean=5.3,sd=5)}
sampler<-function(m){rpois(m,lambda=1)}
t1<-sample(200)
plot(t1,type="l")
for(i in 1:n){
sample_mean[i]<-mean(sampler(400))
}
head(sample_mean)
hist(sample_mean,breaks=1000)
mean(sample_mean)
sd(sample_mean)
sum(sample_mean<=1.1/length(sample_mean))
mean(sample_mean<=1.1)
a=sample_mean<=1.1
mean(a)
b=(sample_mean[a])
mean(b)
x<-seq(0,20,by=0.1)
y<-df(x,df1=3,df2=5)
plot(x,y,type="l")
y2<-pf(x,df1=3,df2=5)
plot(x,y2,type="l")
x<-seq(0.1,by=0.01)
y3<-qf(x,df1=3,df2=5)
plot(x,y3,type="l")
y4<-rf(100,df1=3,df2=5)
plot(y4,type="l")
hist(sample_mean,breaks=1000)
setwd("/Users/lintzujeng/Documents/GitHub/R_Project/Mycode")
library(tidyverse)
library(rpart)
library(rpart.plot)
library(rattle)
library(caret)
library(ipred)
gene.2016 <- read.csv("2016_geneSequencing.csv", header = T)
gene.2017 <- read.csv("2017_geneSequencing.csv", header = T)
gene.all <- rbind(gene.2016, gene.2017)
gene.flu <- filter(gene.all, 病毒總類 == "Influenza")
gene.flu <- gene.flu %>%
separate(發病日期, c("year", "month", "day"), "/")
for (i in 8:10) {
gene.flu[,i] <- as.numeric(gene.flu[,i])
}
flu.factor <- subset(gene.flu, select = c(年齡, 性別, 區域, year, month, day))
flu.factor$性別 <- ifelse(flu.factor$性別 == "男", 1, 0)
flu.factor$區域[flu.factor$區域 == "北區"] <- 1
flu.factor$區域[flu.factor$區域 == "中區"] <- 2
flu.factor$區域[flu.factor$區域 == "南區"] <- 3
flu.factor$區域[flu.factor$區域 == "東區"] <- 4
df.names <- names(flu.factor)
flu.factor[, df.names] <- lapply(flu.factor[,df.names], factor)
n <- nrow(flu.factor)
set.seed(1111)
new.flu.factor <- flu.factor[sample(n),]
t.idx <- sample(seq_len(n), round(0.7*n))
traindata <- new.flu.factor[t.idx, ]
testdata <- new.flu.factor[-t.idx, ]
setwd("/Users/lintzujeng/Documents/GitHub/R_Project/Mycode")
library(tidyverse)
cases1.all <- read.csv("dataset.csv", header = T)
cases2.all <- read.csv("dataset2.csv", header = T)
gene.2016 <- read.csv("2016_geneSequencing.csv", header = T)
gene.2017 <- read.csv("2017_geneSequencing.csv", header = T)
for (i in 1:nrow(cases1.all)) {
cases1.all$發病週別[i] = ceiling(cases1.all$發病週別[i] / 4.416667)
}
names(cases1.all)[3] = "發病月份"
cases2.all$發病月份 = as.numeric(cases2.all$發病月份)
cases.all <- rbind(cases1.all, cases2.all)
cases.all <- cases.all[-1]
cases.all$年齡層 = as.factor(cases.all$年齡層)
age.range <- c("0-4","5-9","10-14","15-19","20-24","25-29", "30-34","35-39","40-44",
"45-49","50-54","55-59","60-64","65-69","70+")
age.counter <- function(m) {
age.cnt <- as.numeric(rep(0, times = 15))
for (i in m) {
if (i == "0" | i == "1" | i == "2" | i == "3" | i == "4") {
age.cnt[1] = age.cnt[1] + 1
} else if (i == "5-9") {
age.cnt[2] = age.cnt[2] + 1
} else if (i == "10-14") {
age.cnt[3] = age.cnt[3] + 1
} else if (i == "15-19") {
age.cnt[4] = age.cnt[4] + 1
} else if (i == "20-24") {
age.cnt[5] = age.cnt[5] + 1
} else if (i == "25-29") {
age.cnt[6] = age.cnt[6] + 1
} else if (i == "30-34") {
age.cnt[7] = age.cnt[7] + 1
} else if (i == "35-39") {
age.cnt[8] = age.cnt[8] + 1
} else if (i == "40-44") {
age.cnt[9] = age.cnt[9] + 1
} else if (i == "45-49") {
age.cnt[10] = age.cnt[10] + 1
} else if (i == "50-54") {
age.cnt[11] = age.cnt[11] + 1
} else if (i == "55-59") {
age.cnt[12] = age.cnt[12] + 1
} else if (i == "60-64") {
age.cnt[13] = age.cnt[13] + 1
} else if (i == "65-69") {
age.cnt[14] = age.cnt[14] + 1
} else if (i == "70+") {
age.cnt[15] = age.cnt[15] + 1
}
}
return(age.cnt)
}
age.male <- filter(cases.all, 性別 == "M")
age.male.cnt <- age.counter(age.male$年齡層)
age.female <- filter(cases.all, 性別 == "F")
age.female.cnt <- age.counter(age.female$年齡層)
age.count.df <- data.frame(group = as.numeric(1:length(age.range)), range = age.range, male = age.male.cnt * (-1), female = age.female.cnt)
gene.all <- rbind(gene.2016, gene.2017)
gene.flu <- filter(gene.all, 病毒總類 == "Influenza")
plot.hist.1617age <- ggplot(data = gene.flu, aes(x = 年齡)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) +
geom_vline(aes(xintercept = mean(年齡)), color = "darkcyan", linewidth = 1.25) +
ggtitle("2016-2017 確診年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.1617age
colors()
plot.hist.1617age <- ggplot(data = gene.flu, aes(x = 年齡)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) +
geom_vline(aes(xintercept = mean(年齡)), color = "lightblue1", linewidth = 1.25) +
ggtitle("2016-2017 確診年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.1617age
plot.hist.1617age <- ggplot(data = gene.flu, aes(x = 年齡)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) +
geom_vline(aes(xintercept = mean(年齡)), color = "lightblue4", linewidth = 1.25) +
ggtitle("2016-2017 確診年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.1617age
age.all <- age.counter(cases.all$年齡層)
age.all
age.all <- data.frame(age.counter(cases.all$年齡層))
age.all <- data.frame(age = age.counter(cases.all$年齡層))
View(age.all)
age.all <- data.frame(range = age.range, age = age.counter(cases.all$年齡層))
plot.hist.0322age <- ggplot(data = age.all, aes(x = range, y = age)) +
geom_bar(fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("2016-2017 確診年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.1617age
plot.hist.0322age
plot.hist.0322age <- ggplot(data = age.all, aes(x = range, y = age)) +
geom_bar(fill="#69b3a2", color="#e9ecef", alpha=0.9, stat = "identity") +
ggtitle("2016-2017 確診年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.0322age
colors()
plot.hist.0322age <- ggplot(data = age.all, aes(x = range, y = age)) +
geom_bar(fill="steelblue1", alpha=0.9, stat = "identity") +
ggtitle("2016-2017 確診年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.0322age
plot.hist.0322age <- ggplot(data = age.all, aes(x = range, y = age)) +
geom_bar(fill="steelblue1", alpha=0.9, stat = "identity") +
ggtitle("2003-2022 確診年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.0322age
plot.hist.0322age <- ggplot(data = age.all, aes(x = range, y = age)) +
geom_bar(fill="steelblue1", alpha=0.9, stat = "identity") +
ggtitle("2003-2022 流感併發重症年齡分佈 Histogram") +
theme(text = element_text(family = "PingFang TC Regular"))
plot.hist.0322age
age.all <- data.frame(id = 1:15, range = age.range, age = age.counter(cases.all$年齡層))
age.all.sum <- sum(age.all$age)
for (i in length(age.all)) {
age.all$weight[i] <- round(age.all[i, 3] / age.all.sum, 2)
}
age.all <- data.frame(id = 1:15, range = age.range, age = age.counter(cases.all$年齡層))
age.all.sum <- sum(age.all$age)
for (i in length(age.all)) {
age.all$weight[i] <- age.all[i, 3] / age.all.sum
}
for (i in length(age.all)) {
age.all$weight[i] <- age.all$age[i] / age.all.sum
}
age.all$age[1]
for (i in 1:length(age.all)) {
age.all$weight[i] <- age.all$age[i] / age.all.sum
}
length(age.all)
length(age.all$age)
for (i in 1:length(age.all$age)) {
age.all$weight[i] <- age.all$age[i] / age.all.sum
}
age.all$weight[i] <-round(age.all$age[i] / age.all.sum, 2)
for (i in 1:length(age.all$age)) {
age.all$weight[i] <-round(age.all$age[i] / age.all.sum, 2)
}
#建立一個function<sampler>做sampling
sampler <- function(m, t1, t2){
n = t1 #sample 次數
sample.mean <- rep(NA, times = n)#建立一個list存所有sampling的mean
for (i in 1:n) {#use for loop to sampling
sample.mean[i] <- mean(sample(m, t2))#把sample出來的mean存入sample.mean
}
excepted <- mean(sample.mean)#get expected value
return(c(excepted, sample.mean))#return expected value
}
age.male <- filter(cases.all, 性別 == "M")
age.all.sampling <- sampler(cases.all$年齡層, 1000, 5000)
table(sample(cases.all$年齡層, 5000))
max(table(sample(cases.all$年齡層, 5000)))
#建立一個function<sampler>做sampling
sampler.table <- function(m, t1, t2){
n = t1 #sample 次數
sample.mode <- rep(NA, times = n)#建立一個list存所有sampling的mean
for (i in 1:n) {#use for loop to sampling
data <-sample(m, t2)
sample.mode[i] <- names(table(data))[which.max(table(data))]#把sample出來的mode存入sample.mode
}
table.mode <- table(sample.mode)
return(table.mode)#return table
}
age.all.sampling <- sampler.table(cases.all$年齡層, 1000, 5000)
age.all.sampling
for (i in 1000) {
data <-sample(cases.all$年齡層, 5000)
sample.mode[i] <- names(table(data))[which.max(table(data))]
}
sample.mode <- rep(NA, times = n)#建立一個list存所有sampling的mean
sample.mode <- rep(NA, times = 1000)#建立一個list存所有sampling的mean
for (i in 1000) {
data <-sample(cases.all$年齡層, 5000)
sample.mode[i] <- names(table(data))[which.max(table(data))]
}
sample.mode
data <-sample(cases.all$年齡層, 5000)
data
?sample
setwd("/Users/lintzujeng/Documents/GitHub/R_Project/Mycode")
library(tidyverse)
cases1.all <- read.csv("dataset.csv", header = T)
cases2.all <- read.csv("dataset2.csv", header = T)
gene.2016 <- read.csv("2016_geneSequencing.csv", header = T)
gene.2017 <- read.csv("2017_geneSequencing.csv", header = T)
for (i in 1:nrow(cases1.all)) {
cases1.all$發病週別[i] = ceiling(cases1.all$發病週別[i] / 4.416667)
}
names(cases1.all)[3] = "發病月份"
cases2.all$發病月份 = as.numeric(cases2.all$發病月份)
cases.all <- rbind(cases1.all, cases2.all)
cases.all <- cases.all[-1]
cases.all$年齡層 = as.factor(cases.all$年齡層)
age.range <- c("0-4","5-9","10-14","15-19","20-24","25-29", "30-34","35-39","40-44",
"45-49","50-54","55-59","60-64","65-69","70+")
age.counter <- function(m) {
age.cnt <- as.numeric(rep(0, times = 15))
for (i in m) {
if (i == "0" | i == "1" | i == "2" | i == "3" | i == "4") {
age.cnt[1] = age.cnt[1] + 1
} else if (i == "5-9") {
age.cnt[2] = age.cnt[2] + 1
} else if (i == "10-14") {
age.cnt[3] = age.cnt[3] + 1
} else if (i == "15-19") {
age.cnt[4] = age.cnt[4] + 1
} else if (i == "20-24") {
age.cnt[5] = age.cnt[5] + 1
} else if (i == "25-29") {
age.cnt[6] = age.cnt[6] + 1
} else if (i == "30-34") {
age.cnt[7] = age.cnt[7] + 1
} else if (i == "35-39") {
age.cnt[8] = age.cnt[8] + 1
} else if (i == "40-44") {
age.cnt[9] = age.cnt[9] + 1
} else if (i == "45-49") {
age.cnt[10] = age.cnt[10] + 1
} else if (i == "50-54") {
age.cnt[11] = age.cnt[11] + 1
} else if (i == "55-59") {
age.cnt[12] = age.cnt[12] + 1
} else if (i == "60-64") {
age.cnt[13] = age.cnt[13] + 1
} else if (i == "65-69") {
age.cnt[14] = age.cnt[14] + 1
} else if (i == "70+") {
age.cnt[15] = age.cnt[15] + 1
}
}
return(age.cnt)
}
#建立一個function<sampler>做sampling
sampler <- function(m, t1, t2){
n = t1 #sample 次數
sample.mean <- rep(NA, times = n)#建立一個list存所有sampling的mean
for (i in 1:n) {#use for loop to sampling
sample.mean[i] <- mean(sample(m, t2))#把sample出來的mean存入sample.mean
}
excepted <- mean(sample.mean)#get expected value
return(c(excepted, sample.mean))#return expected value
}
#建立一個function<sampler>做sampling
sampler.table <- function(m, t1, t2, prob){
n = t1 #sample 次數
sample.mode <- rep(NA, times = n)#建立一個list存所有sampling的mean
for (i in 1:n) {#use for loop to sampling
data <-sample(m, t2, prob = prob)
sample.mode[i] <- names(table(data))[which.max(table(data))]#把sample出來的mode存入sample.mode
}
table.mode <- table(sample.mode)
return(table.mode)#return table
}
age.all <- data.frame(id = 1:15, range = age.range, age = age.counter(cases.all$年齡層))
age.all.sum <- sum(age.all$age)
for (i in 1:length(age.all$age)) {
age.all$weight[i] <-round(age.all$age[i] / age.all.sum, 2)
}
age.all.sampling <- sampler.table(age.all, 1000, 5000, age.all$weight)
View(age.all)
age.all.sampling <- sampler.table(age.all, 1000, 5, age.all$weight)
